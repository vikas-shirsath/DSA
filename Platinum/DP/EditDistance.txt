Given two strings word1 and word2, return the minimum number of operations required to convert word1 to word2.

You have the following three operations permitted on a word:

Insert a character
Delete a character
Replace a character
 

Example 1:

Input: word1 = "horse", word2 = "ros"
Output: 3
Explanation: 
horse -> rorse (replace 'h' with 'r')
rorse -> rose (remove 'r')
rose -> ros (remove 'e')
Example 2:

Input: word1 = "intention", word2 = "execution"
Output: 5
Explanation: 
intention -> inention (remove 't')
inention -> enention (replace 'i' with 'e')
enention -> exention (replace 'n' with 'x')
exention -> exection (replace 'n' with 'c')
exection -> execution (insert 'u')



// time limit exceeded
class Solution {
    public int minDistance(String word1, String word2) {
        return editDistance(word1, word2, word1.length(), word2.length());
    }

    private static int editDistance(String s1, String s2, int l1, int l2) {
        if(l1 == 0)
            return l2;
        if(l2 == 0)
            return l1;
        
        if(s1.charAt(l1 - 1) == s2.charAt(l1 - 1))
            return editDistance(s1, s2, l1-1, l2 - 1);

        return 1 + Math.min(editDistance(s1, s2, l1 - 1, l2 - 1), Math.min(editDistance(s1, s2, l1-1, l2), editDistance(s1, s2, l1, l2 - 1)));
    }
}

//opmtimized using dynamic programming
class Solution {
    public int minDistance(String word1, String word2) {
        int n = word1.length(), m = word2.length();
        int[][] dp = new dp[n + 1][m + 1];

        for(int i = 0; i <= n; i++) {
            for(int j = 0; j <= m; j++) {
                dp[i][j] = -1;
            }
        }

        return editDistance(word1, word2, word1.length(), word2.length(), dp);
    }

    private static int editDistance(String s1, String s2, int l1, int l2, dp[][]) {
        if(l1 == 0)
            return l2;
        if(l2 == 0)
            return l1;
        if(dp[l1][l2] != -1)
            return dp[l1][l2];
        
        if(s1.charAt(l1 - 1) == s2.charAt(l1 - 1))
            return dp[l1][l2]  = editDistance(s1, s2, l1-1, l2 - 1, dp);

        return dp[l1][l2] = 1 + Math.min(editDistance(s1, s2, l1 - 1, l2 - 1, dp), Math.min(editDistance(s1, s2, l1-1, l2, dp), editDistance(s1, s2, l1, l2 - 1, dp)));
    }
}


















